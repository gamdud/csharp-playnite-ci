name: Build Playnite Extension

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout repository at the specified commit.
      - name: Checkout repository at commit 50ed2ef2bebd07f3635fd4c4e003980513154f2f
        uses: actions/checkout@v4
        with:
          repository: Koriebonx98/Main-Stuff
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 50ed2ef2bebd07f3635fd4c4e003980513154f2f

      # Setup MSBuild so that msbuild is available.
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Restore NuGet packages.
      - name: Restore NuGet packages
        run: nuget restore "Playnite Addons/PC_GAMES_Local/PC_GAMES_Local.sln"

      # Insert the missing HttpClient using directive (cheeky "sed") without permanently editing the repo.
      - name: Insert missing HttpClient using directive
        shell: pwsh
        run: |
          $csFile = "Playnite Addons/PC_GAMES_Local/PC_GAMES_Local.cs"
          $content = Get-Content $csFile -Raw
          if ($content -notmatch "using System.Net.Http;") {
              # Use regex to insert the missing using directive after "using System.Text.RegularExpressions;"
              $pattern = '(using System\.Text\.RegularExpressions;)'
              $replacement = '${1}' + [System.Environment]::NewLine + 'using System.Net.Http;'
              $content = [regex]::Replace($content, $pattern, $replacement)
              Set-Content $csFile -Value $content
          }
          Write-Host "Inserted using System.Net.Http; directive if not present."

      # Update the Path assignment in the CS file to use Remove instead of Replace.
      - name: Update Path assignment in CS file
        shell: pwsh
        run: |
          $csFile = "Playnite Addons/PC_GAMES_Local/PC_GAMES_Local.cs"

          $oldLine = @'
          Path = $"{{InstallDir}}\\{GetRelativePath(folder, exe).Replace(gameName, "").TrimStart('\\')}",'@

          $newLine = @'
          Path = $"{{InstallDir}}\\{GetRelativePath(folder, exe).Remove(GetRelativePath(folder, exe).IndexOf(gameName), gameName.Length).TrimStart('\\')}",
          '@

          $content = Get-Content $csFile -Raw
          $updated = $content.Replace($oldLine, $newLine)
          Set-Content $csFile -Value $updated
          Write-Host "Updated Path assignment in CS file."

      
      # Build the project (default build target).
      - name: Build Playnite Extension
        run: msbuild "PC_GAMES_Local.csproj" /p:Configuration=Release
        working-directory: "Playnite Addons/PC_GAMES_Local"

      # Package the extension by zipping the required files and renaming the zip as .pext.
      # Package the extension properly by flattening the structure.
      - name: Package the extension properly
        shell: pwsh
        run: |
          # Define paths
          $outputFile = "bin/Release/PC_GAMES_Local.pext"
          $packageFolder = "package_temp"
          
          # Remove the temporary package folder if it already exists.
          if (Test-Path $packageFolder) { Remove-Item $packageFolder -Recurse -Force }
          
          # Create a new temporary package folder.
          New-Item -ItemType Directory -Path $packageFolder | Out-Null
          
          # Copy required files to the temporary package folder.
          # The extension manifest and icon must be at the root,
          # along with the plugin assembly (e.g., PC_GAMES_Local.dll).
          Copy-Item "extension.yaml" -Destination $packageFolder
          Copy-Item "icon.png" -Destination $packageFolder
          Copy-Item "bin/Release/PC_GAMES_Local.dll" -Destination $packageFolder
          
          # Remove the output package file if it exists.
          if (Test-Path $outputFile) { Remove-Item $outputFile }
          
          # Compress the contents of the package folder into a .pext file.
          Compress-Archive -Path "$packageFolder/*" -DestinationPath $outputFile -Force
          
          # Optionally, remove the temporary package folder.
          Remove-Item $packageFolder -Recurse -Force
          
          Write-Host "Packaged extension is at $outputFile"
        working-directory: "Playnite Addons/PC_GAMES_Local"

      
      # Upload the generated .pext file as an artifact.
      - name: Upload Playnite Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PC_GAMES_Local.pext
          path: "Playnite Addons/PC_GAMES_Local/bin/Release/PC_GAMES_Local.pext"
