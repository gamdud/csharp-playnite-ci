name: Build Playnite Extension

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout repository at the specified commit.
      - name: Checkout repository at commit 50ed2ef2bebd07f3635fd4c4e003980513154f2f
        uses: actions/checkout@v4
        with:
          repository: Koriebonx98/Main-Stuff
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 50ed2ef2bebd07f3635fd4c4e003980513154f2f

      # Setup MSBuild on the Windows runner.
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Restore NuGet packages.
      - name: Restore NuGet packages
        run: nuget restore "Playnite Addons/PC_GAMES_Local/PC_GAMES_Local.sln"

      # Patch build files to inject missing using (without editing existing source files)
      - name: Inject GlobalUsings to fix HttpClient error
        shell: pwsh
        run: |
          $targetDir = "Playnite Addons/PC_GAMES_Local"
          
          # Create a Directory.Build.targets file to include GlobalUsings.cs
          $dirTargetsPath = Join-Path $targetDir "Directory.Build.targets"
          @"
<Project>
  <ItemGroup>
    <Compile Include="GlobalUsings.cs" />
  </ItemGroup>
</Project>
"@ | Out-File -FilePath $dirTargetsPath -Encoding utf8
          
          # Create GlobalUsings.cs with the global using directive for System.Net.Http
          $globalUsingsPath = Join-Path $targetDir "GlobalUsings.cs"
          @"
global using System.Net.Http;
"@ | Out-File -FilePath $globalUsingsPath -Encoding utf8

      # Build the Playnite extension project (force C# 10 for global usings)
      - name: Build Playnite Extension
        run: msbuild "PC_GAMES_Local.csproj" /p:Configuration=Release /p:LangVersion=10
        working-directory: "Playnite Addons/PC_GAMES_Local"

      # Package the extension into a .pext by zipping the required files.
      - name: Package Playnite Extension
        shell: pwsh
        run: |
          $packagePath = "bin/Release/PC_GAMES_Local.pext"
          if (Test-Path $packagePath) { Remove-Item $packagePath }
          
          # Define the files/folders needed for the Playnite extension.
          $filesToInclude = @("extension.yaml", "icon.png", "bin/Release/*")
          
          Compress-Archive -Path $filesToInclude -DestinationPath $packagePath -Force
        working-directory: "Playnite Addons/PC_GAMES_Local"

      # Upload the resulting .pext file as an artifact.
      - name: Upload Playnite Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PC_GAMES_Local.pext
          path: "Playnite Addons/PC_GAMES_Local/bin/Release/PC_GAMES_Local.pext"
